// Code generated by scaffold. DO NOT EDIT.
package payment

import (
	"event_sourcing_bank_system_gateway/package/settings"
	"event_sourcing_bank_system_gateway/proto/payment"

	"event_sourcing_bank_system_gateway/package/monitor"
	"event_sourcing_bank_system_gateway/package/wrapper"

	"go.elastic.co/apm/v2"
)

type createTransactionHandler struct {
}

func NewCreateTransactionHandler(cfg *settings.Config) *createTransactionHandler {
	return &createTransactionHandler{}
}

// @Summary	permission:
// @Tags		PaymentService
// @Accept		json
// @Produce	json
// @Param		source_account_id	body		string								false	"<param_description>"
// @Param		target_account_id	body		string								false	"<param_description>"
// @Param		description			body		string								false	"<param_description>"
// @Param		send_amount			body		payment.Money						false	"<param_description>"
// @Param		idempotency_key		body		string								false	"<param_description>"
// @Param		body				body		payment.CreateTransactionRequest	true	"Body example"
// @Success	200					{object}	payment.CreateTransactionResponse
// @Router		/api/v1/payment-service/transaction [post]
func (handler *createTransactionHandler) Handle(ctx *wrapper.Context) (interface{}, error) {
	monitor.SetApmContext(apm.DetachedContext(ctx.Request.Context()))
	data := payment.CreateTransactionRequest{}
	if err := ctx.BindJSON(&data); err != nil {
		return nil, err
	}

	return &data, nil
}
